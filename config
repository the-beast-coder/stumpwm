;; -*-lisp-*-

(in-package :stumpwm)

;;; Startup Programs
;;; Set Background
(run-shell-command "sh ~/.xprofile")

(defvar color1 "#ff92d0")
(defvar color2 "#282a36")

(load-module "swm-gaps")
(if (not swm-gaps:*gaps-on*)
  (swm-gaps:toggle-gaps))
(setf swm-gaps:*inner-gaps-size* 8
      swm-gaps:*outer-gaps-size* 8
      swm-gaps:*head-gaps-size* 8)

(setf *message-window-gravity* :center
      *input-window-gravity* :center
      *window-border-style* :thin
      *message-window-padding* 10
      *maxsize-border-width* 2
      *normal-border-width* 2
      *transient-border-width* 2
      stumpwm::*float-window-border* 2
      stumpwm::*float-window-title-height* 5
      *mouse-focus-policy* :click)


(defvar *modelineinfo* "battery | date")
(sb-thread:make-thread
 (lambda ()
   (loop do
     (progn
       (setf *modelineinfo* (run-shell-command "sh ~/.config/stumpwm/modeline.sh" t))
       (sleep 10)))))

(setf stumpwm:*screen-mode-line-format*
      (list "^B^3 %g ^n^b %W ^> "
            " "
            '(:eval *modelineinfo*)))

(setf *mode-line-border-width* 0)
(setf *mode-line-background-color* "#000809")
(setf *mode-line-foreground-color* "DeepSkyBlue")

;; turn on/off the mode line for the current head only.
(stumpwm:toggle-mode-line (stumpwm:current-screen)
                          (stumpwm:current-head))

(stumpwm:grename "One")
(stumpwm:gnewbg "Two")
(stumpwm:gnewbg "Three")
(stumpwm:gnewbg "Four")
(stumpwm:gnewbg "Five")
(stumpwm:gnewbg "Six")
(stumpwm:gnewbg "Seven")
(stumpwm:gnewbg "Eight")
(stumpwm:gnewbg "Nine")

;; I change the prefix key to something else besides a keychord.
;; The following three lines are a dirty hack to make SUPER the prefix key.
;; This was originally (set-prefix-key (kbd "C-t"))
(run-shell-command "xmodmap -e 'clear mod4'" t)
(run-shell-command "xmodmap -e \'keycode 133 = F20\'" t)
(set-prefix-key (kbd "F20"))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

(define-key *root-map* (kbd "Q") "quit")
(define-key *root-map* (kbd "C-r") "restart-hard")
(define-key *root-map* (kbd "c") "command-mode")

;; (define-key *root-map* (kbd "h") "move-focus left")
;; (define-key *root-map* (kbd "j") "move-focus down")
;; (define-key *root-map* (kbd "k") "move-focus up")
;; (define-key *root-map* (kbd "l") "move-focus left")

(define-key *root-map* (kbd "h") "move-focus left")
(define-key *root-map* (kbd "j") "move-focus down")
(define-key *root-map* (kbd "k") "move-focus up")
(define-key *root-map* (kbd "l") "move-focus right")
(define-key *root-map* (kbd "H") "move-window left")
(define-key *root-map* (kbd "J") "move-window down")
(define-key *root-map* (kbd "K") "move-window up")
(define-key *root-map* (kbd "L") "move-window right")

(define-key *root-map* (kbd "C-h") '*help-map*)

(define-key *root-map* (kbd "q") "delete")
(define-key *root-map* (kbd "r") "remove")
(define-key *root-map* (kbd "R") "iresize")

(define-key *root-map* (kbd "C-m") "mode-line")

(define-key *root-map* (kbd "RET") "exec st") 
;; Launch Emacs
(define-key *root-map* (kbd "e") "exec emacsclient -c -a ''")
;; Launch Dmenu
(define-key *root-map* (kbd "d") "exec dmenu_run")
;; My Dmenu Scripts
(define-key *root-map* (kbd "C-E") "exec ./.dmenu/dmenu-edit-configs.sh")
(define-key *root-map* (kbd "C-N") "exec ./.dmenu/dmenu-sysmon.sh")
(define-key *root-map* (kbd "C-P") "exec passmenu")
(define-key *root-map* (kbd "C-R") "exec ./.dmenu/dmenu-reddio.sh")
(define-key *root-map* (kbd "C-S") "exec ./.dmenu/dmenu-surfraw.sh")
(define-key *root-map* (kbd "C-T") "exec ./.dmenu/dmenu-trading.sh")
;; Ssh somewhere
(define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh ")
;; Lock screen
(define-key *root-map* (kbd "C-l") "exec slock")


(defvar *aadi/emacs-map* (make-sparse-keymap)
  "Keymap for finding files (and doing other things) in emacs.")
(define-key *root-map* (kbd "e") '*aadi/emacs-map*)
(define-key *aadi/emacs-map* (kbd "e") "exec emacsclient -c -a ''")
(define-key *aadi/emacs-map* (kbd "f") "exec emacsclient -c -a '' ~")
(define-key *aadi/emacs-map* (kbd "c") "exec emacsclient -c -a '' ~/.config/")
(define-key *aadi/emacs-map* (kbd "w") "exec emacsclient -c -a '' ~/Documents/emacs-wiki/main.org")
(define-key *aadi/emacs-map* (kbd "s") "exec emacsclient -c -a '' ~/Documents/some-code")
(define-key *aadi/emacs-map* (kbd "m") "exec emacsclient -c -a '' ~/.config/stumpwm/config")

(defvar *aadi/browser-map* (make-sparse-keymap)
  "Keymap for finding files (and doing other things) in emacs.")
(define-key *root-map* (kbd "w") '*aadi/browser-map*)
(define-key *aadi/browser-map* (kbd "w") "exec brave")
(define-key *aadi/browser-map* (kbd "y") "exec yt")
(define-key *aadi/browser-map* (kbd "i") "exec brave --incognito")

(defvar *aadi/scripts-map* (make-sparse-keymap)
  "Keymap for finding files (and doing other things) in emacs.")
(define-key *root-map* (kbd "a") '*aadi/scripts-map*)
(define-key *aadi/scripts-map* (kbd "h") "exec st -e htop")
(define-key *aadi/scripts-map* (kbd "r") "exec st -e ranger")

(define-key *top-map* (kbd "XF86AudioMute") "exec pamixer -t")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec pamixer --allow-boost -i 5")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec pamixer --allow-boost -d 5")
                                        ; (set-font (make-instance 'xft:font :family "Iosevka Nerd Font" :subfamily "Bold" :size 7 :antialias t))
                                        ; (set-font "-*-fixed-medium-r-normal-*-*-140-*-*-*-*-*-*")
                                        ;(set-font "-xos4-terminus-medium-r-normal--20-200-90-90-c-90-iso8859-18")

(load "~/quicklisp/setup.lisp")
(load-module "ttf-fonts")
(ql:quickload :clx-truetype)
(clx-truetype:cache-fonts)

(set-font (make-instance 'xft:font
                         :family "JetBrains Mono"
                         :subfamily "Regular"
                         :size 9
                         :antialias t))

;;; Define window placement policy...
;; Clear rules
(clear-window-placement-rules)

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;;
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
(define-frame-preference "Default"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
  (1 t nil :class "XTerm"))

(define-frame-preference "Ardour"
  (0 t   t   :instance "ardour_editor" :type :normal)
  (0 t   t   :title "Ardour - Session Control")
  (0 nil nil :class "XTerm")
  (1 t   nil :type :normal)
  (1 t   t   :instance "ardour_mixer")
  (2 t   t   :instance "jvmetro")
  (1 t   t   :instance "qjackctl")
  (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

(define-frame-preference "Shareland"
  (0 t   nil :class "XTerm")
  (1 nil t   :class "aMule"))
